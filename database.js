// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export function findBestMatch(question) {
    const normalizedQuestion = question.toLowerCase().trim();
    
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (database[normalizedQuestion]) {
        return database[normalizedQuestion];
    }

    // –ü–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    let bestMatch = null;
    let bestScore = 0;

    for (const [key, value] of Object.entries(database)) {
        if (typeof key === 'string') {
            const score = calculateSimilarity(normalizedQuestion, key.toLowerCase());
            if (score > bestScore && score > 0.4) {
                bestScore = score;
                bestMatch = value;
            }
        }
    }

    return bestMatch;
}

export function findLinks(question) {
    const normalizedQuestion = question.toLowerCase().trim();
    
    // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Å—Å—ã–ª–æ–∫
    for (const category of Object.values(database.links_database || {})) {
        for (const item of category) {
            if (item.request_variations.some(variation => 
                normalizedQuestion.includes(variation) || 
                calculateSimilarity(normalizedQuestion, variation) > 0.7
            )) {
                return item.responses;
            }
        }
    }
    
    return null;
}

export function getRandomResponse(responses) {
    if (Array.isArray(responses)) {
        return responses[Math.floor(Math.random() * responses.length)];
    }
    return responses;
}

function calculateSimilarity(str1, str2) {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    
    const commonWords = words1.filter(word => 
        words2.some(w2 => w2.includes(word) || word.includes(w2))
    );
    
    return commonWords.length / Math.max(words1.length, words2.length);
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
export const database = {
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    "–ø—Ä–∏–≤–µ—Ç": ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"],
    "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"],
    
    // –ü—Ä–æ—â–∞–Ω–∏—è
    "–ø–æ–∫–∞": ["–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", "–ü–æ–∫–∞! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!", "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!"],
    "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è": ["–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞!", "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"],
    
    // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    "—Å–ø–∞—Å–∏–±–æ": ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä", "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä", "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä"],
    
    // –ë–∞–∑–∞ —Å—Å—ã–ª–æ–∫
    links_database: {
        programming: [
            {
                request_variations: ["–∫–∞–∫ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "–≥–¥–µ —É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                responses: [
                    "–í–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∞–ª–∞:\n- MDN Web Docs: https://developer.mozilla.org\n- freeCodeCamp: https://www.freecodecamp.org"
                ]
            }
        ]
    }
};

// –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
export const communicationStyles = {
    friendly: {
        greeting: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å? üòä",
        responses: {
            unclear: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å? ü§î",
            error: "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! üòÖ"
        }
    },
    formal: {
        greeting: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        responses: {
            unclear: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?",
            error: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }
    }
};

// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
export const emotionalTriggers = {
    positive: ['—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥', '–≤–µ—Å–µ–ª–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä'],
    negative: ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ'],
    neutral: ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–æ–±—ã—á–Ω–æ', '–∫–∞–∫ –≤—Å–µ–≥–¥–∞']
};
